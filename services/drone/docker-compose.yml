version: "3"
services:
  drone:
    image: drone/drone:2.0
    restart: unless-stopped
    environment:
      DRONE_GITEA_SERVER: ${DRONE_GITEA_HOST}
      DRONE_GITEA_CLIENT_ID: ${DRONE_GITEA_CLIENT_ID}
      DRONE_GITEA_CLIENT_SECRET: ${DRONE_GITEA_CLIENT_SECRET}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_SERVER_HOST: ${DRONE_HOST}
      DRONE_SERVER_PROTO: https
      DRONE_COOKIE_SECRET: ${DRONE_COOKIE_SECRET}
      DRONE_COOKIE_TIMEOUT: 168h
      DRONE_DATABASE_DRIVER: postgres
      DRONE_DATABASE_DATASOURCE: postgres://${DB_USER}:${DB_PASS}@drone-db:5432/${DB_NAME}?sslmode=disable
      DRONE_DATABASE_SECRET: ${DRONE_DATABASE_SECRET}
      DRONE_USER_FILTER: ${DRONE_USER_FILTER}
      DRONE_USER_CREATE: ${DRONE_USER_CREATE}
    networks:
      - default
      - traefik
    volumes:
      - ${DRONE_DATA}:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drone.rule=Host(`${DRONE_HOST}`)"

  drone-db:
    image: postgres:13.4
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    networks:
      - default
      - adminer
    volumes:
      - ${DB_DATA}:/var/lib/postgresql/data

  drone-runner:
    image: drone/drone-runner-docker:1.6
    restart: unless-stopped
    environment:
      DRONE_RPC_PROTO: https
      DRONE_RPC_HOST: ${DRONE_HOST}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_RUNNER_CAPACITY: 2
      DRONE_RUNNER_NAME: ${DRONE_RUNNER_NAME}
    networks:
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  default:
  adminer:
    external: true
  traefik:
    external: true
